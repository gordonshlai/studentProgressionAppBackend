/**
 * Users Router, contains the route handlers for /api/users end point.
 * @module routes/users
 */

const bcrypt = require("bcrypt");
const config = require("config");
const auth = require("../middleware/auth");
const _ = require("lodash");
const { User, validateUser } = require("../models/user");
const express = require("express");
const router = express.Router();
const validateWith = require("../middleware/validate");

/**
 * Get request route handler.
 */
router.get("/me", auth, async (req, res) => {
  /**
   * the user object returned from the database.
   */
  const user = await User.findById(req.user._id).select("-password");
  res.send(user);
});

/**
 * Post request route handler
 */
router.post("/", validateWith(validateUser), async (req, res) => {
  let user = await User.findOne({ email: req.body.email });
  if (user)
    return res
      .status(400)
      .send("User with given email has already registered.");

  user = new User(
    _.pick(req.body, ["firstName", "lastName", "email", "password"])
  );

  /**
   * The encryption salt generated by bcrypt.
   * @type {string}
   */
  const salt = await bcrypt.genSalt(10);
  user.password = await bcrypt.hash(user.password, salt);
  user.imageUrl = config.get("heroku") + "/images/empty-profile-picture.jpeg";
  user.thumbnailUrl =
    config.get("heroku") + "/images/empty-profile-picture-thumbnail.jpeg";
  await user.save();

  /**
   * json web token
   * @type {string}
   */
  const token = user.generateAuthToken();
  res
    .header("x-auth-token", token)
    .send(
      _.pick(user, [
        "_id",
        "firstName",
        "lastName",
        "email",
        "imageUrl",
        "thumbnailUrl",
      ])
    );
});

module.exports = router;
